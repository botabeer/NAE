from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import os, random, typing, json

app = Flask(__name__)

LINE_CHANNEL_ACCESS_TOKEN = os.getenv("LINE_CHANNEL_ACCESS_TOKEN")
LINE_CHANNEL_SECRET = os.getenv("LINE_CHANNEL_SECRET")
if not LINE_CHANNEL_ACCESS_TOKEN or not LINE_CHANNEL_SECRET:
    raise RuntimeError("Set LINE_CHANNEL_ACCESS_TOKEN and LINE_CHANNEL_SECRET environment variables")

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# ุชุญููู ุงููููุงุช
def load_file_lines(filename: str) -> typing.List[str]:
    try:
        with open(filename, "r", encoding="utf-8") as f:
            return [line.strip() for line in f if line.strip()]
    except Exception:
        return []

questions_file = load_file_lines("questions.txt")
challenges_file = load_file_lines("challenges.txt")
confessions_file = load_file_lines("confessions.txt")
personality_file = load_file_lines("personality.txt")

if not questions_file:
    questions_file = ["ูุง ุฃูุซุฑ ุตูุฉ ุชุญุจูุง ูู ุดุฑูู ุญูุงุชูุ", "ูุง ุฃูู ุดุนูุฑ ุฌุงุกู ููุง ุดูุชู ูุฃูู ูุฑุฉุ"]
if not challenges_file:
    challenges_file = ["ุงูุชุจ ุฑุณุงูุฉ ูุตูุฑุฉ ุชุจุฏุฃ ุจู ุฃุญุจู ูุฃู", "ุงุฑุณู ูู ุตูุฑุฉ ุชูุซู ุฃุฌูู ุฐูุฑู ุนูุฏู ูุนู"]
if not confessions_file:
    confessions_file = ["ุงุนุชุฑู ุจุฃูู ุดุฎุต ุฌุฐุจู ูู ุญูุงุชู", "ุงุนุชุฑู ุจุฃูุซุฑ ุนุงุฏุฉ ุณูุฆุฉ ุนูุฏู"]
if not personality_file:
    personality_file = ["ุชุญุจ ุชุจุฏุฃ ูููู ุจุงููุดุงุท ุงู ุจุงููุฏูุก", "ูู ุชุนุชุจุฑ ููุณู ุงุฌุชูุงุนู ุฃู ุงูุทูุงุฆู"]

# ุชุญููู ุงูุฃูุนุงุจ ูู ููู JSON
try:
    with open("games.json", "r", encoding="utf-8") as f:
        games = json.load(f)
except Exception:
    games = {}

# ุชุญููู ุงูุดุฎุตูุงุช ูู ููู JSON
try:
    with open("characters.json", "r", encoding="utf-8") as f:
        characters = json.load(f)
except Exception:
    characters = {}

# ุฌุฏูู ุงูููุงุท ูุฑุจุท ุงูุฅุฌุงุจุงุช ุจุงูุดุฎุตูุงุช
personality_points = {
    "ุงูุงุฌุชูุงุนู": ["ุงูุตุฏุงูุฉ", "ุงูุนูู", "ุงูุงูู"],
    "ุงูุนุงุทูู": ["ุงูุญุจ", "ุงูุฐูุฑูุงุช", "ุงูุนุงุฆูุฉ"],
    "ุงููุถููู": ["ุงููุณุชูุจู", "ุงูุฎูุงู", "ุงูุงูุชุดุงู"],
    "ุงูููุทูู": ["ุงููุฑุงุฑุงุช", "ุงูุนูู", "ุงูููุงูู"],
    "ุงูุนููู": ["ุงูุฐุงุช", "ุงูุชูููุฑ", "ุงููุงุถู"],
    "ุงูุญุงุฒู": ["ุงูุนูู", "ุงูููุงุฏุฉ", "ุงููุฑุงุฑุงุช"],
    "ุงูุฏุงุนู": ["ุงูุงูู", "ุงูุงุตุฏูุงุก", "ุงูุนูุงูุงุช"],
    "ุงููุจุชูุฑ": ["ุงูุฎูุงู", "ุงูุงุจุฏุงุน", "ุงูุชุบููุฑ"],
    "ุงููุณุชูู": ["ุงููุฑุงุฑุงุช", "ุงููุณุคูููุฉ", "ุงููุณุชูุจู"],
    "ุงููุงุฑูุฒูู": ["ุงูููุงุฏุฉ", "ุงูุงุตุฏูุงุก", "ุงูุชุฃุซูุฑ"]
}

# ุฐุงูุฑุฉ ูุคูุชุฉ ูุชุฎุฒูู ุฅุฌุงุจุงุช ูู ูุณุชุฎุฏู
user_answers = {}

HELP_TEXT = (
    "ุฃูุงูุฑ ุงูุจูุช:\n"
    "- ุณุคุงู โ ุนุฑุถ ุณุคุงู ุนุงู\n"
    "- ุชุญุฏู โ ุชุญุฏู ููุชุน\n"
    "- ุงุนุชุฑุงู โ ุงุนุชุฑุงู\n"
    "- ุดุฎุตู โ ุณุคุงู ุดุฎุตู\n"
    "- ูุนุจู1 ุฅูู ูุนุจู10 โ ุจุฏุก ูุนุจุฉ ุฌูุงุนูุฉ\n"
    "ุทุฑููุฉ ุงููุนุจ:\n"
    "1. ุจุนุฏ ุจุฏุก ุงููุนุจุฉ ูู ุนุถู ูุฑุณู 'ุงุจุฏุฃ' ููุงูุถูุงู\n"
    "2. ุณูุธูุฑ ููู ุนุถู 5 ุฃุณุฆูุฉ ุจุงูุชุฑุชูุจ\n"
    "3. ูุฌูุจ ูู ุนุถู ุนูู ูู ุณุคุงู ุจุงูุฑูู ุงูููุงุณุจ 1-4\n"
    "4. ุจุนุฏ ุงูุชูุงุก ุฌููุน ุงูุฃุณุฆูุฉ ุณูุธูุฑ ุชุญููู ุงูุดุฎุตูุฉ ุจูุงุกู ุนูู ุงูุฅุฌุงุจุงุช"
)

@app.route("/callback", methods=["POST"])
def callback():
    signature = request.headers["X-Line-Signature"]
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return "OK"

@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    text = event.message.text.strip()
    user_id = event.source.user_id

    # ุฃูุฑ ูุณุงุนุฏุฉ
    if text == "ูุณุงุนุฏุฉ":
        line_bot_api.reply_message(event.reply_token, TextSendMessage(HELP_TEXT))
        return

    # ุฃูุนุงุจ ูุนุจู1 ุฅูู ูุนุจู10
    if text.startswith("ูุนุจู"):
        game_number = text.replace("ูุนุจู", "")
        if game_number.isdigit() and 1 <= int(game_number) <= 10:
            game_key = f"game{game_number}"
            if game_key in games:
                question = games[game_key]["question"]
                options = games[game_key]["options"]
                msg = f"๐ฎ **{user_id}**ุ ูุนุจุชู ุฑูู {game_number}:\n{question}\n"
                for idx, opt in enumerate(options, start=1):
                    msg += f"{idx}. {opt}\n"
                msg += "\nุงุฎุชุฑ ุฑูู ุงูุฅุฌุงุจุฉ 1-4"
                user_answers[user_id] = {"game": game_number, "answers": []}
                line_bot_api.reply_message(event.reply_token, TextSendMessage(msg))
                return
        else:
            return  # ุฃู ุฃูุฑ ุฎุงุฑุฌ ุงููุทุงู ูุชู ุชุฌุงููู

    # ุงุฎุชูุงุฑ ุงูุฅุฌุงุจุฉ
    if text.isdigit() and int(text) in range(1,5):
        if user_id not in user_answers:
            return
        choice = int(text)
        game_number = user_answers[user_id]["game"]
        game_key = f"game{game_number}"
        selected_option = games[game_key]["options"][choice -1]
        user_answers[user_id]["answers"].append(selected_option)
        if len(user_answers[user_id]["answers"]) >= 10:
            result = analyze_personality(user_answers[user_id]["answers"])
            del user_answers[user_id]
            msg = f"โ **{user_id}** ุงูุชูุช ุงููุนุจุฉ\n\n{result}"
            line_bot_api.reply_message(event.reply_token, TextSendMessage(msg))
            return
        else:
            msg = f"โ **{user_id}** ุงุฎุชุฑุช: {selected_option}\nุงูุชุจ ูุนุจู{int(game_number)+1} ููุณุคุงู ุงูุชุงูู"
            line_bot_api.reply_message(event.reply_token, TextSendMessage(msg))
            return

    # ุฃุณุฆูุฉ ุนุงูุฉ
    if text == "ุณุคุงู":
        q = random.choice(questions_file)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(q))
        return

    # ุชุญุฏู
    if text == "ุชุญุฏู":
        c = random.choice(challenges_file)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(c))
        return

    # ุงุนุชุฑุงู
    if text == "ุงุนุชุฑุงู":
        c = random.choice(confessions_file)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(c))
        return

    # ุดุฎุตู
    if text == "ุดุฎุตู":
        c = random.choice(personality_file)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(c))
        return

    # ุชุฌุงูู ุฃู ุฃูุฑ ุบูุฑ ูุนุฑูู
    return

def analyze_personality(answers: typing.List[str]) -> str:
    scores = {char:0 for char in characters.keys()}
    for ans in answers:
        for char, topics in personality_points.items():
            if any(keyword in ans for keyword in topics):
                scores[char] +=1
    top_character = max(scores, key=scores.get)
    description = characters[top_character]
    result = f"ุดุฎุตูุชู ุงูุฃูุฑุจ: {top_character}\n{description['ุงููุตู']}\nุงูุฅูุฌุงุจูุงุช: {', '.join(description['ุงูุฅูุฌุงุจูุงุช'])}\nุงูุณูุจูุงุช: {', '.join(description['ุงูุณูุจูุงุช'])}"
    return result

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT",5000)), debug=True)
