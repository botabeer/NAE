from flask import Flask, request, abort
from linebot import LineBotApi, WebhookHandler
from linebot.exceptions import InvalidSignatureError
from linebot.models import MessageEvent, TextMessage, TextSendMessage
import random, os

app = Flask(__name__)

LINE_CHANNEL_ACCESS_TOKEN = os.environ.get('LINE_CHANNEL_ACCESS_TOKEN')
LINE_CHANNEL_SECRET = os.environ.get('LINE_CHANNEL_SECRET')

line_bot_api = LineBotApi(LINE_CHANNEL_ACCESS_TOKEN)
handler = WebhookHandler(LINE_CHANNEL_SECRET)

# -------------------------------------------------------
# ุฃุณุฆูุฉ ุงูุญุจุ ุงูุชุญุฏูุงุชุ ุงูุงุนุชุฑุงูุงุช
# -------------------------------------------------------
questions = [
"ูุง ุฃูุซุฑ ุดูุก ุชุญุจู ูู ุดุฑูู ุญูุงุชูุ",
"ุงุนุชุฑู ุจุดูุก ุชุฎููู ุนูู.",
"ูู ุณุจู ููุฏูุช ุนูู ุชุตุฑู ูุน ุดุฑูููุ",
"ูู ุชุบุงุฑ ุนููู ูุซูุฑุ",
"ูู ุชุดุนุฑ ุฃูู ููููู ุจุฏูู ููุงูุ",
"ูุง ุฃูู ุดูุก ุฌุฐุจู ูููุ",
"ูู ุชุนุชุจุฑ ููุณู ุงูุทุฑู ุงูุฃูุซุฑ ุญุจุงูุ",
"ูู ุชุญุจ ุงูููุงุฌุขุช ุงูุฑููุงูุณูุฉุ",
"ูุง ุฃูุซุฑ ุดูุก ูุฌุนูู ุชุจุชุณู ูุนูุ",
"ูุง ุฃุฌูู ุฐูุฑู ุจููููุงุ"
]

love_challenges = [
"ุงูุชุจ ูู ุฑุณุงูุฉ ุชุจุฏุฃ ุจูููุฉ (ุฃุญุจู ูุฃู...).",
"ุดุงุฑู ูุนู ุฐูุฑู ูุง ุชูุณุงูุง.",
"ูู ูู ุดู ุชุญุจู ููู ูุง ูุฏ ููุชู.",
"ุงุฑุณูู ุตูุฑุฉ ูุฏููุฉ ุชุฌูุนูู.",
"ุงุญูู ูู ุฃูู ูุญุธุฉ ุฎูู ูููุง ููุจู ูู."
]

confessions = [
"ุงุนุชุฑู ุจุฃูู ุดุฎุต ุฌุฐุจู ูู ุญูุงุชู.",
"ุงุนุชุฑู ุจุฃูุซุฑ ุนุงุฏุฉ ุณูุฆุฉ ุนูุฏู.",
"ุงุนุชุฑู ุจุดู ูุฏูุช ุนููู.",
"ุงุนุชุฑู ุจุงุณู ุฃูู ุญุจ ูู ุญูุงุชู.",
"ุงุนุชุฑู ุจุณุฑ ูุง ููุชู ูุฃุญุฏ."
]

# -------------------------------------------------------
# ุงูุฃูุนุงุจ ุงูุซูุงุซ (ูู ูุนุจุฉ 10 ุฃุณุฆูุฉุ 4 ุฎูุงุฑุงุช)
# -------------------------------------------------------
games = {
    "1": {
        "name": "ุงูุบุงุจุฉ",
        "questions": [
            {"q": "ุฃูุช ูู ุบุงุจุฉ ููุฏุงูู ููุฎ ููุฌูุฑุ ุชุฎุชุงุฑ:", "options": ["ุชุฏุฎู ุงูููุฎ", "ุชุชุฌุงููู ูุชููู ุงููุดู", "ุชุฏูุฑ ุญููู ูุชุณุชูุดู", "ุชุฌูุณ ูุฑูุจ ูุชุฑุงูุจ ุงูููุงู"]},
            {"q": "ูุฌุฏุช ุฌุฏูู ููุงู ุตุบูุฑ ูู ุงูุบุงุจุฉุ ุชุฎุชุงุฑ:", "options": ["ุชุดุฑุจ ููู", "ุชููุฃ ุฒุฌุงุฌุชู", "ุชุชุจุน ูุฌุฑู ุงููุงุก", "ุชุชุฑูู"]},
            {"q": "ุฑุฃูุช ุทุงุฆุฑ ุบุฑูุจ ูู ุงูุณูุงุกุ ุชุฎุชุงุฑ:", "options": ["ุชุชุจุน ุงูุทุงุฆุฑ", "ุชุชุฑูู", "ุชุญุงูู ุชุตููุฑู", "ุชุฌูุณ ุชุชุฃูู"]},
            {"q": "ูุฌุฏุช ุซูุฑุฉ ุบุฑูุจุฉ ุนูู ุงูุฃุฑุถุ ุชุฎุชุงุฑ:", "options": ["ุชุฃูููุง", "ุชุชุฑููุง", "ุชุฌูุนูุง", "ุชูุญุตูุง"]},
            {"q": "ุตูุช ุบุฑูุจ ูุฃุชู ูู ุงูุฃุดุฌุงุฑุ ุชุฎุชุงุฑ:", "options": ["ุชุณุชูุดู ุงูุตูุช", "ุชุบุงุฏุฑ ุงูููุงู", "ุชุฑุงูุจ ุจูุฏูุก", "ุชุตุฑุฎ ูุชุนุฑู ุฑุฏุฉ ูุนู"]},
            {"q": "ูุฌุฏุช ุฌุณุฑ ุฎุดุจู ูุฏููุ ุชุฎุชุงุฑ:", "options": ["ุชุนุจุฑู", "ุชุชุฌุงููู", "ุชูุญุตู ุฃููุงู", "ุชูู ููุชูููุฑ"]},
            {"q": "ุณูุนุช ุญููุงู ูุฒูุฌุฑุ ุชุฎุชุงุฑ:", "options": ["ุชูุชุฑุจ ุจุญุฐุฑ", "ุชุฎุชุจุฆ", "ุชุตุฑุฎ", "ุชุชุฑุงุฌุน"]},
            {"q": "ูุฌุฏุช ุฎุฑูุทุฉ ูุฏููุฉุ ุชุฎุชุงุฑ:", "options": ["ุชุชุจุนูุง", "ุชุชุฑููุง", "ุชุญุฑููุง", "ุชุญูููุง"]},
            {"q": "ุฑุงุฆุญุฉ ุนุทุฑ ุบุฑูุจุฉุ ุชุฎุชุงุฑ:", "options": ["ุชุชุจุนูุง", "ุชุชุฌุงูููุง", "ุชุญุฐุฑ", "ุชุณุชูุชุน ุจูุง"]},
            {"q": "ูููุฉ ูุงุฏุฆุฉ ูุงูุบุงุจุฉ ูุธููุฉุ ุชุฎุชุงุฑ:", "options": ["ุชุฎูู", "ุชูุงุตู ุงููุดู", "ุชุณุชุฑูุญ ุนูู ุงูุฃุฑุถ", "ุชุฑุงูุจ ุงููุฌูู"]}
        ]
    },
    "2": {
        "name": "ุงูุฌุฒูุฑุฉ",
        "questions": [
            {"q": "ุฃูุช ุนูู ุดุงุทุฆ ุฌุฒูุฑุฉ ููุฌูุฑุฉุ ุชุฎุชุงุฑ:", "options": ["ุชุณุชูุดู ุงูุดุงุทุฆ", "ุชุฌูุณ ุนูู ุงูุฑูุงู", "ุชุจุญุซ ุนู ูุฃูู", "ุชุณุจุญ ูู ุงูุจุญุฑ"]},
            {"q": "ูุฌุฏุช ูููู ุนูู ุงูุฌุฒูุฑุฉุ ุชุฎุชุงุฑ:", "options": ["ุชุฏุฎู ุงูููู", "ุชุฑุงูุจู ููุท", "ุชุชุฌุงููู", "ุชุจุญุซ ุนู ูุฏุฎู ุขุฎุฑ"]},
            {"q": "ุฑุฃูุช ูุงุฑุจ ููุฌูุฑุ ุชุฎุชุงุฑ:", "options": ["ุชูุญุตู", "ุชุฑูู", "ุชุญุงูู ุชุดุบููู", "ุชุฎุจุฆู"]},
            {"q": "ูุฌุฏุช ูุงููุฉ ุบุฑูุจุฉุ ุชุฎุชุงุฑ:", "options": ["ุชุฃูููุง", "ุชุฌูุนูุง", "ุชุชุฑููุง", "ุชุณุชุดูุฑ ุงูุขุฎุฑูู"]},
            {"q": "ุณูุนุช ุตูุช ุฃููุงุฌ ุบุฑูุจุฉุ ุชุฎุชุงุฑ:", "options": ["ุชุณุชูุดู ุงูุตูุช", "ุชุชุฑู ุงูููุงู", "ุชุณุฌู ุงูุตูุช", "ุชุฑุงูุจ ุงูุฃููุงุฌ"]},
            {"q": "ุฑุฃูุช ุญููุงู ุบุฑูุจุ ุชุฎุชุงุฑ:", "options": ["ุชูุชุฑุจ ุจุญุฐุฑ", "ุชุชุฑูู", "ุชุตูุฑู", "ุชุฑุงูุจู"]},
            {"q": "ูุฌุฏุช ุฎุฑูุทุฉ ุฌุฒูุฑุฉุ ุชุฎุชุงุฑ:", "options": ["ุชุชุจุนูุง", "ุชุชุฑููุง", "ุชุญูููุง", "ุชุญุฑููุง"]},
            {"q": "ุฑุงุฆุญุฉ ุฏุฎุงู ูู ุจุนูุฏุ ุชุฎุชุงุฑ:", "options": ["ุชุชุฌู ูุญูู", "ุชุชุฌุงููู", "ุชุญุฐุฑ", "ุชุฑุงูุจ ูู ุจุนูุฏ"]},
            {"q": "ููู ุงูุฌุฒูุฑุฉ ูุธููุ ุชุฎุชุงุฑ:", "options": ["ุชุฎูู", "ุชูุงุตู ุงููุดู", "ุชุฑุงูุจ ุงููุฌูู", "ุชุฌูุณ ุจุฌุงูุจ ุงููุงุฑ"]},
            {"q": "ูุฌุฏุช ุตูุฏูู ูุฏููุ ุชุฎุชุงุฑ:", "options": ["ุชูุชุญู", "ุชุชุฑูู", "ุชูุญุตู", "ุชุญููู ูุนู"]}
        ]
    },
    "3": {
        "name": "ุงููุฏููุฉ",
        "questions": [
            {"q": "ุฃูุช ูู ุดุงุฑุน ูุฒุฏุญูุ ุชุฎุชุงุฑ:", "options": ["ุชุณูุฑ ูุน ุงููุงุณ", "ุชุชููู ูุชุชุฃูู", "ุชุฏุฎู ูุญู ูุฑูุจ", "ุชุณุฃู ุนู ุงูุงุชุฌุงู"]},
            {"q": "ูุฌุฏุช ูุงููุฑุฉ ุฌูููุฉุ ุชุฎุชุงุฑ:", "options": ["ุชุตูุฑูุง", "ุชุฌูุณ ุจุฌุงูุจูุง", "ุชุชุฌุงูููุง", "ุชุฑุงูุจ ุงููุงุณ ุญูููุง"]},
            {"q": "ุฑุฃูุช ูุทุฉ ุถุงุฆุนุฉุ ุชุฎุชุงุฑ:", "options": ["ุชูุชุฑุจ ูููุง", "ุชุชุฑููุง", "ุชุญุงูู ุฅุทุนุงููุง", "ุชุจุญุซ ุนู ุตุงุญุจูุง"]},
            {"q": "ุณูุนุช ููุณููู ูู ุจุนูุฏุ ุชุฎุชุงุฑ:", "options": ["ุชุชุจุน ุงูุตูุช", "ุชุชุฌุงููู", "ุชุณุชูุชุน ูู ููุงูู", "ุชุณุฌู ุงูุตูุช"]},
            {"q": "ุฑุฃูุช ูุชุฌุฑ ุบุฑูุจุ ุชุฎุชุงุฑ:", "options": ["ุชุฏุฎู ุงููุชุฌุฑ", "ุชุชุฌุงููู", "ุชุฑุงูุจู", "ุชุณุฃู ุนู ููุชุฌุงุชู"]},
            {"q": "ุฑุงุฆุญุฉ ุทุนุงู ูุฐูุฐุ ุชุฎุชุงุฑ:", "options": ["ุชุชุจุน ุงูุฑุงุฆุญุฉ", "ุชุณุชูุชุน ุจูุง ูู ุจุนูุฏ", "ุชุชุฌุงูููุง", "ุชุณุฃู ูู ุตุงุญุจูุง"]},
            {"q": "ูุฌุฏุช ูุชุงุจ ูููู ุนูู ุงูุฑุตููุ ุชุฎุชุงุฑ:", "options": ["ุชูุชุญู", "ุชุชุฑูู", "ุชุตูุฑู", "ุชุญููู ูุนู"]},
            {"q": "ุฑุฃูุช ุทูู ูุจููุ ุชุฎุชุงุฑ:", "options": ["ุชุณุงุนุฏู", "ุชุชุฑูู", "ุชุณุฃู ุนู ุณุจุจ ุงูุจูุงุก", "ุชุฑุงูุจู"]},
            {"q": "ููู ุงููุฏููุฉ ูุธููุ ุชุฎุชุงุฑ:", "options": ["ุชุณูุฑ ุจุณุฑุนุฉ", "ุชุชููู ูุชุชุฃูู", "ุชุฏุฎู ูุทุนู", "ุชุฑุงูุจ ุงูุดุงุฑุน"]},
            {"q": "ูุฌุฏุช ุฑุณุงูุฉ ุบุฑูุจุฉุ ุชุฎุชุงุฑ:", "options": ["ุชูุฑุฃูุง", "ุชุชุฑููุง", "ุชุตูุฑูุง", "ุชุญูููุง"]}
        ]
    }
}

# -------------------------------------------------------
# ุฌูุณุงุช ุงููุณุชุฎุฏู
# -------------------------------------------------------
user_sessions = {}  # ููู ูุณุชุฎุฏู: {"game": "1", "step": 0, "answers": []}
user_asked_questions = {}  # ูุชุฌูุจ ุชูุฑุงุฑ ุฃุณุฆูุฉ ุงูุญุจ ูุงูุชุญุฏูุงุช

# -------------------------------------------------------
# ุชุญููู ุงูุดุฎุตูุฉ
# -------------------------------------------------------
def analyze_personality(answers, user_name="ูุดุงุฑู"):
    score_active = 0
    score_calm = 0
    score_love = 0

    for a in answers:
        t = a.strip().lower()
        if any(x in t for x in ["1", "ุชุฏุฎู", "ุชุณูุฑ", "ูุบุงูุฑุฉ", "ูุดุงุท", "ุงุณุชูุดุงู", "ุชุฌุฑุจุฉ", "ูุงุฆุฏ"]):
            score_active += 1
        if any(x in t for x in ["2", "ุชุฌูุณ", "ูุฏูุก", "ุตุจุฑ", "ุชููุฑ", "ุฑุงูุจ"]):
            score_calm += 1
        if any(x in t for x in ["3", "4", "ุนุงุทูู", "ุญุจ", "ูุดุงุนุฑ", "ููุจ", "ุชูุชู"]):
            score_love += 1

    total = score_active + score_calm + score_love
    def pct(n):
        return int((n / total) * 100) if total > 0 else 0

    result = f"๐น ุชุญููู ุดุฎุตูุฉ {user_name}:\n"
    result += f"ุงูุณูุฉ ุงูุฑุฆูุณูุฉ: "
    if score_love > max(score_active, score_calm):
        result += "ุนุงุทููุฉ ูุญุณุงุณุฉ ๐\n\n"
    elif score_active > score_calm:
        result += "ูููุชุญุฉ ููุดูุทุฉ ๐ฅ\n\n"
    elif score_calm > score_active:
        result += "ูุงุฏุฆุฉ ููุชุฒูุฉ ๐ฟ\n\n"
    else:
        result += "ูุชูุงุฒูุฉ ๐\n\n"

    result += f"๐ฅ ุงููุดุงุท ูุงูุทุงูุฉ: {pct(score_active)}%\n"
    result += "- ุชุญุจ ุงููุจุงุฏุฑุฉ ูุงููุบุงูุฑุฉุ ูุชุฌุฑุจุฉ ุฃุดูุงุก ุฌุฏูุฏุฉ.\n"
    result += f"๐ฟ ุงููุฏูุก ูุงูุตุจุฑ: {pct(score_calm)}%\n"
    result += "- ุชููู ููุชูููุฑ ูุจู ุงุชุฎุงุฐ ุงููุฑุงุฑุงุชุ ุตุจูุฑ ูุชุญุงูุธ ุนูู ุชูุงุฒูู.\n"
    result += f"๐ ุงูุนุงุทูุฉ ูุงููุดุงุนุฑ: {pct(score_love)}%\n"
    result += "- ุญุณุงุณ ูุชูุชู ุจุงูุขุฎุฑููุ ุชุนุจุฑ ุนู ูุดุงุนุฑู ุจูุถูุญ.\n\n"
    result += "โจ ูุตูุญุฉ: ุญุงูู ููุงุฒูุฉ ุทุงูุชูุ ุตุจุฑูุ ูุนุงุทูุชู ูุชุนูุด ุญูุงุชู ูุนูุงูุงุชู ุจุฃูุถู ุดูู."
    return result

# -------------------------------------------------------
# Webhook
# -------------------------------------------------------
@app.route("/callback", methods=['POST'])
def callback():
    signature = request.headers.get('X-Line-Signature', '')
    body = request.get_data(as_text=True)
    try:
        handler.handle(body, signature)
    except InvalidSignatureError:
        abort(400)
    return 'OK'

# -------------------------------------------------------
# ุงูุฑุฏูุฏ ุงูุฑุฆูุณูุฉ
# -------------------------------------------------------
@handler.add(MessageEvent, message=TextMessage)
def handle_message(event):
    user_id = event.source.user_id
    text = event.message.text.strip().lower()
    user_name = "ูุดุงุฑู"
    try:
        user_name = line_bot_api.get_profile(user_id).display_name
    except:
        pass

    # ------------------- ุฃูุนุงุจ -------------------
    if "ุงุจุฏุฃ ูุนุจุฉ 1" in text or "ุงุจุฏุฃ ูุนุจุฉ 2" in text or "ุงุจุฏุฃ ูุนุจุฉ 3" in text:
        game_num = text[-1]
        user_sessions[user_id] = {"game": game_num, "step": 0, "answers": []}
        q = games[game_num]["questions"][0]
        opts = "\n".join([f"{i+1}. {o}" for i,o in enumerate(q["options"])])
        line_bot_api.reply_message(event.reply_token, TextSendMessage(
            text=f"๐ฎ ุจุฏุฃุช ูุนุจุฉ {games[game_num]['name']}!\nุงูุณุคุงู 1:\n{q['q']}\n{opts}"
        ))
        return

    # ------------------- ุฅุฌุงุจุฉ ุนูู ุงููุนุจุฉ -------------------
    if user_id in user_sessions:
        session = user_sessions[user_id]
        game_num = session["game"]
        step = session["step"]
        qlist = games[game_num]["questions"]

        # ุชุณุฌูู ุงูุฅุฌุงุจุฉ
        session["answers"].append(text)
        session["step"] += 1

        # ุงูุณุคุงู ุงูุชุงูู
        if session["step"] >= len(qlist):
            analysis = analyze_personality(session["answers"], user_name)
            del user_sessions[user_id]
            line_bot_api.reply_message(event.reply_token, TextSendMessage(text=analysis))
        else:
            q = qlist[session["step"]]
            opts = "\n".join([f"{i+1}. {o}" for i,o in enumerate(q["options"])])
            line_bot_api.reply_message(event.reply_token, TextSendMessage(
                text=f"ุงูุณุคุงู {session['step']+1}:\n{q['q']}\n{opts}"
            ))
        return

    # ------------------- ุฃุณุฆูุฉ ุงูุญุจ -------------------
    if "ุณุคุงู" in text or "ุณูุงู" in text:
        asked = user_asked_questions.get(user_id, set())
        available = [q for q in questions if q not in asked]
        if not available:
            user_asked_questions[user_id] = set()
            available = questions.copy()
        q = random.choice(available)
        user_asked_questions.setdefault(user_id, set()).add(q)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=q))
        return

    # ------------------- ุชุญุฏู -------------------
    if "ุชุญุฏู" in text:
        c = random.choice(love_challenges)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"๐ {c}"))
        return

    # ------------------- ุงุนุชุฑุงู -------------------
    if "ุงุนุชุฑุงู" in text:
        conf = random.choice(confessions)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=f"๐ฉท {conf}"))
        return

    # ------------------- ุชุญููู ุงูุดุฎุตูุฉ -------------------
    if "ุญูู ุดุฎุตูุชู" in text:
        # ุชุญููู ุฌููุน ุฅุฌุงุจุงุช ุงููุณุชุฎุฏู ุงูุณุงุจูุฉ ูู ุงูุฃูุนุงุจ
        if user_id in user_sessions:
            answers = user_sessions[user_id]["answers"]
        else:
            answers = []
        analysis = analyze_personality(answers, user_name)
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=analysis))
        return

    # ------------------- ูุณุงุนุฏุฉ -------------------
    if "ูุณุงุนุฏุฉ" in text:
        help_text = (
            "โค๏ธ ุฃูุงูุฑ ุงูุจูุช:\n"
            "- 'ุณุคุงู' ุฃู 'ุณูุงู' โ ุณุคุงู ุญุจ ุฃู ุตุฑุงุญุฉ ุนุดูุงุฆู.\n"
            "- 'ุชุญุฏู' โ ุชุญุฏู ุญุจ ุฑููุงูุณู.\n"
            "- 'ุงุนุชุฑุงู' โ ุณุคุงู ุงุนุชุฑุงู ุตุฑูุญ.\n"
            "- 'ุงุจุฏุฃ ูุนุจุฉ 1/2/3' โ ุชุจุฏุฃ ุฃู ูู ุงูุฃูุนุงุจ ุงูุซูุงุซ.\n"
            "- 'ุญูู ุดุฎุตูุชู' โ ูุนุทู ุชุญููู ุชูุตููู ูู ุฅุฌุงุจุงุชู.\n"
            "- 'ูุณุงุนุฏุฉ' โ ุนุฑุถ ุงูุฃูุงูุฑ.\n"
            "๐ก ุชูุฏุฑ ุชุฌุงูุจ ุจุงูุฑููุ ุงููุตุ ุฃู 'ุงูุชุงูู' ูุชููู ุงูุฃุณุฆูุฉ."
        )
        line_bot_api.reply_message(event.reply_token, TextSendMessage(text=help_text))
        return

    # ุฃู ุดูุก ุขุฎุฑ
    line_bot_api.reply_message(event.reply_token, TextSendMessage(
        text="ูุง ูููุชุ ุญุงูู ุชูุชุจ ุงูุฑูู ุฃู ุงูุฅุฌุงุจุฉ ุงูุตุญูุญุฉ ุฃู โุงูุชุงููโ ุฃู ุฃุญุฏ ุฃูุงูุฑ ุงูุจูุช."
    ))
    return

# -------------------------------------------------------
if __name__ == "__main__":
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)
